---
title: "Class 13: Transcriptomics and the Analysis of RNA-Seq Data"
author: "Lana (PID: A17013518)"
format: pdf
---

The data for this hands-on session comes from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

## Data Import

We have two input files, so-called "count data" and "col data".

```{r}
library(BiocManager)
library(DESeq2)
```

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

```{r}
head(metadata)
```


## Data Explore

> Q1. How many genes are in this dataset? 

```{r}
dim(counts)[1]
```


> Q2. How many ‘control’ cell lines do we have?

```{r}
metadata$dex == "control"
```


## Toy differential gene expression

Time to do some analysis.

We have 4 control and 4 treated samples/experiments/columns.

Make sure the metadata id column matches the columns in our count data. 

```{r}
colnames(counts)
```

```{r}
metadata$id
```

```{r}
colnames(counts) == metadata$id
```

To check that all elements of a vector are TRUE we can use the `all()` function. 

```{r}
all(c(T, T, T))
```

```{r}
all(colnames(counts) == metadata$id) 
```

To start I will calculate the `control.mean` and `treated.mean` values and compare them. 

- Identify and extract the `control` only columns
- Determine the mean values for each gene (i.e. row)
- Do the same for `treated`

```{r}
# Where does it tell me which columns are control?
control.inds <- metadata$dex == "control"
control.counts <- counts[ ,control.inds]
control.mean <- apply(control.counts, 1, mean)
head(control.mean)
```

```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[ ,treated.inds]
treated.mean <- apply(treated.counts, 1, mean)
head(treated.mean)
```

Lets store these together fro ease of book keeping.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

Have a view of this data:

```{r}
plot(meancounts)
```

This data is screaming at us to log transform the data. 

```{r}
plot(meancounts, log = "xy")
```

I want to compare the treated and the control variables here and we will use fold change in log2 units to do this. `log2/(Treated/Control)`

```{r}
log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
meancounts$log2fc <- log2fc
head(meancounts$log2fc)
```

A doubling in the treated

```{r}
log2(20/10)
```

```{r}
log2(5/10)
```

```{r}
log2(40/10)
```

A common rule of thumb cut-off for calling a gene "differentially expressed" is a log2 fold-change value of either > +2 or < -2 for "up regulated" and "down regulated" respectively. 

```{r}
sum (meancounts$log2fc > +2, na.rm = T)
```


```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)

```

> Q. How many genes do we have left that we can ssay something about it?

```{r}
nrow(mycounts)
```

> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```


> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

```{r}
sum(up.ind)
```


> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

```{r}
sum(down.ind)
```


> Q10. Do you trust these results? Why or why not?

No, not necessesarily. We are missing lots of stats. 

## Setting up for DNA Seq

Let's do this properly with the help of DESeq2 package

```{r}
library(DESeq2)
citation("DESeq2")
```

Run our main analysis with the `DESeq()` function

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

```{r}
dds <- DESeq(dds)
```


```{r}
res <- results(dds)
head(res)
```

Summarize the table.

```{r}
summary(res)
```

## Volcano Plot

A very common and useful summary of results figure from this type of analysis is called a volcano plot - a plot of lof2FC vs p-value. 

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

Add some color and nice labels for this plot

```{r}
mycols <- rep("pink", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "violet" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "turquoise"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

abline(v=c(-2,2), col="pink", lty=2)
abline(h=-log(0.1), col="pink", lty=2)
```

